{
    "used_for_generating_answers": [
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v9.0",
            "chunk_content": " code M49 for countries||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as the Nearest branch for Amazon . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. The company name corpus includes language-specific names. Variations of a company\u2019s name like stock name, registered name, etc. are all mapped to a common name, thus ensuring that, for example, Amazon, Amazon.com, Amazon Inc are all recognized as a single company. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the color from a user utterance. For example, Set the status to Green. Returns a value for the Color as Green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance. For example, This handbag is priced at 200 dollars where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian National Rupees, Dinar) - Currency symbols ($, S$, \u00a3) - Standard currency abbreviations (INR, USD) - Commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, refer to Regex Expressions. Composite Composite entities are used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: I am interested in the Tesla Model S 2018 model or What would a red Tesla 2010 model cost or T ell me about Tesla Model S . As you can see, the bot typically needs to process a combination of details like Make, Model, Year, and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, Book a flight on the 10th of October returns the value for Date in ISO8601 date format is YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: - Formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY. - All number dates like YMD and DMY for 20180518 and 09102013. - Formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd. - Named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018. - Absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, the day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of the year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of the month. - Named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5"
        }
    ],
    "sent_to_llm": [
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v7.0",
            "chunk_content": " M49 for countries||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as \u201c Nearest branch for Amazon\u201d . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the of color from a user utterance, for example, Set the status to green. Returns the value for Color as green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance, for example, \u201c This handbag is priced at 200 dollars\u201d \u2013 where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian national rupees, Dinar), - Currency symbols ($, S$, \u00a3), - standard currency abbreviations (INR, USD), and - commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, see Regex Expressions. Composite Composite entities can be used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: \u2018I am interested in Tesla Model S 2018 model\u2019 or \u2018What would a red Tesla 2010 model cost\u2019 or \u2018Tell me about Tesla Model S\u2019. As you can see, the bot typically needs to process a combination of details like Make, Model, Year and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, \u201c Book a flight on the 10th of October\u201d, returns the value for Date in ISO8601 date format as YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY all number dates like YMD and DMY for 20180518 and 09102013 formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018 absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of month named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, day before new year, day after Christmas relative dates from absolute like 2 more days from tomorrow, 3 days after July 4th, 3 days from now, 5days from today, Need two more days, in 2days weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year \"entities\": {"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v7.1",
            "chunk_content": " M49 for countries||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as \u201c Nearest branch for Amazon\u201d . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the of color from a user utterance, for example, Set the status to green. Returns the value for Color as green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance, for example, \u201c This handbag is priced at 200 dollars\u201d \u2013 where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian national rupees, Dinar), - Currency symbols ($, S$, \u00a3), - standard currency abbreviations (INR, USD), and - commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, see Regex Expressions. Composite Composite entities can be used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: \u2018I am interested in Tesla Model S 2018 model\u2019 or \u2018What would a red Tesla 2010 model cost\u2019 or \u2018Tell me about Tesla Model S\u2019. As you can see, the bot typically needs to process a combination of details like Make, Model, Year and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, \u201c Book a flight on the 10th of October\u201d, returns the value for Date in ISO8601 date format as YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY all number dates like YMD and DMY for 20180518 and 09102013 formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018 absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of month named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, day before new year, day after Christmas relative dates from absolute like 2 more days from tomorrow, 3 days after July 4th, 3 days from now, 5days from today, Need two more days, in 2days weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year \"entities\": {"
        }
    ],
    "qualified_chunks": [
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v7.3",
            "chunk_content": " M49 for countries||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as \u201c Nearest branch for Amazon\u201d . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the of color from a user utterance, for example, Set the status to green. Returns the value for Color as green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance, for example, \u201c This handbag is priced at 200 dollars\u201d \u2013 where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian national rupees, Dinar), - Currency symbols ($, S$, \u00a3), - standard currency abbreviations (INR, USD), and - commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, see Regex Expressions. Composite Composite entities can be used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: \u2018I am interested in Tesla Model S 2018 model\u2019 or \u2018What would a red Tesla 2010 model cost\u2019 or \u2018Tell me about Tesla Model S\u2019. As you can see, the bot typically needs to process a combination of details like Make, Model, Year and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, \u201c Book a flight on the 10th of October\u201d, returns the value for Date in ISO8601 date format as YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY all number dates like YMD and DMY for 20180518 and 09102013 formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018 absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of month named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, day before new year, day after Christmas relative dates from absolute like 2 more days from tomorrow, 3 days after July 4th, 3 days from now, 5days from today, Need two more days, in 2days weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year \"entities\": {"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v8.0",
            "chunk_content": " 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as the Nearest branch for Amazon . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the color from a user utterance. For example, Set the status to Green. Returns a value for the Color as Green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance. For example, This handbag is priced at 200 dollars where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian National Rupees, Dinar) - Currency symbols ($, S$, \u00a3) - Standard currency abbreviations (INR, USD) - Commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, refer to Regex Expressions. Composite Composite entities are used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: I am interested in the Tesla Model S 2018 model or What would a red Tesla 2010 model cost or T ell me about Tesla Model S . As you can see, the bot typically needs to process a combination of details like Make, Model, Year, and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, Book a flight on the 10th of October returns the value for Date in ISO8601 date format is YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: - Formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY. - All number dates like YMD and DMY for 20180518 and 09102013. - Formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd. - Named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018. - Absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, the day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of the year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of the month. - Named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year. \"entities\": { \"DateEntity\": \"1982-"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v8.1",
            "chunk_content": "||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as the Nearest branch for Amazon . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. The company name corpus includes language-specific names. Variations of a company\u2019s name like stock name, registered name, etc. are all mapped to a common name, thus ensuring that, for example, Amazon, Amazon.com, Amazon Inc are all recognized as a single company. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the color from a user utterance. For example, Set the status to Green. Returns a value for the Color as Green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance. For example, This handbag is priced at 200 dollars where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian National Rupees, Dinar) - Currency symbols ($, S$, \u00a3) - Standard currency abbreviations (INR, USD) - Commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, refer to Regex Expressions. Composite Composite entities are used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: I am interested in the Tesla Model S 2018 model or What would a red Tesla 2010 model cost or T ell me about Tesla Model S . As you can see, the bot typically needs to process a combination of details like Make, Model, Year, and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, Book a flight on the 10th of October returns the value for Date in ISO8601 date format is YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: - Formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY. - All number dates like YMD and DMY for 20180518 and 09102013. - Formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd. - Named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018. - Absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, the day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of the year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of the month. - Named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need"
        },
        {
            "chunk_title": "Entity Types - Kore.ai Documentation",
            "chunk_content": "| |numericalCode||United Nations, used numerical code M49 for countries||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as the Nearest branch for Amazon . The value for Company Name is returned ( Amazon ) as a string. The company name corpus includes language-specific names. Variations of a company\u2019s name like stock name, registered name, etc. are all mapped to a common name, thus ensuring that, for example, Amazon, Amazon.com, Amazon Inc are all recognized as a single company. Apart from the supported companies, the virtual assistant recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } ABN AMRO Accor Acer Activision Blizzard (Activision Blizzard) Acumen Adidas Aditi Technologies Aditya Birla Advanced Micro Devices (AMD) Affiliated Computer Services Ahold Delhaize Air France-KLM Airbus Aitken Spence AkzoNobel Albertson\u2019s Albertsons Alcatel-Lucent Alfa Laval Alliance Global Allianz AllState Alstom Altria Amazon.com (Amazon) American Express (AMEX) American International Group (AIG) American Savings Andritz AG AOL Time Warner (AOL Time Warner) Aon Apollo Tyres Apple Apple Computer Arcor Assicurazioni Generali Associated Press Asus AT&T Atari Avast Software Avatar Reality Avianca AXA Axiata Axis Bank Bacardi Banco Bilbao Vizcaya Argentaria (BBVA) Banco Santander Bank of America (BOA) Bank of Hawaii (BOH) Bank of Montreal Barclays Barilla Barnes and Noble Barrick Gold BASF Baskin-Robbins Bata Bayer Becton Dickinson Berkshire Hathaway Bic BIDV Billabong Black & Decker Bloomingdale\u2019s BMW BNP Paribas (BNP) Boeing Bombardier Borders Bouygues BRAC Bridgestone British Airways (BA) British Petroleum (BP) Brookstone\u2019s Cadbury Schweppes Canon CapGemini Capital One Caterpillar Celestica Central Pacific Bank Chevron Cisco Systems (Cisco) Citibank (Citi and Citigroup) Coca-Cola (Coke) Cognizant Technology Solutions Comerica Concentrix ConocoPhillips (Conoco) Costco Countrywide Creative Labs Cr\u00e9dit Agricole (CA) Credit Suisse Cummins CVS Dabur Daikin Daimler AG Dangote Danish Refugee Council Danone Decathlon Dell Dell Computer (Dell) Deloitte Delta Air Lines (Delta) Deutsche Bank Deutsche Telekom DHL Dow Chemical Dunkin\u2019 Donuts easyJet EDF Electrolux Electronic Arts (EA) Electronic Data Systems (EDS) Embraer EMC Emerson Electric Enel Eni Enron Epson Ericsson Etisalat Expedia Exxon Mobil (Exxon Mobil) ExxonMobil (Exxon Mobil) EY Faber-Castell Facebook Federal Express (FedEx) Ferrero Fiat Ficosa Finastra FIS FleetBoston Foodland Ford Motor Company (Ford) FPT France T\u00e9l\u00e9com Fujitsu Gap Gazprom General Electric (GE) General Motors (GM) General Nutrition Center (GNC) Generali Gerdau Gillette Glaxo Smith Kline (Glaxo) Google Haier Halliburton Hawaiian Electric (HECO) HCL Technologies Hearst Heineken Hewlett Packard (HP) Hewlett-Packard (HP) Hilti Hindustan Computers Hitachi Honda Honda Motors (Honda) Honeywell HSBC HTC Huawei Hutchison Whampoa Hyundai Hyundai Motor Company ICAP ICICI IKEA Illinois Tool Works Indesit Indian Oil Indofood Infosys ING Ingersoll Rand Instagram Intel International Business Machines (IBM) International Paper Intesa Sanpaolo IOCL Isuzu Jardine Matheson JCPenney (J.C. Penney, JC Penny, and JC Penney) JG Summit Holdings Johnson & Johnson (J&J) Jollibee JPMorgan Chase (JPMorgan Chase) Kenya Airways KFC Kia Motors (Kia) Kingston Technology KMart Knorr Komatsu Konami Kony Kore (Kore.ai and Kore.com) KPMG Krispy Kreme Kroger L\u2019Or\u00e9al Lactalis Lagard\u00e8re Lear Lenovo LensCrafters Leonardo Leoni AG Lexmark LG LG Electronics (LG) Linde LiuGong Lockheed Martin Lotte Lowe\u2019s Lowes"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v9-1",
            "chunk_content": " the name of a company from user utterances such as the Nearest branch for Amazon . The value for Company Name is returned ( Amazon ) as a string. See Supported Companies list. The company name corpus includes language-specific names. Variations of a company\u2019s name like stock name, registered name, etc. are all mapped to a common name, thus ensuring that, for example, Amazon, Amazon.com, Amazon Inc are all recognized as a single company. Apart from the supported companies, the bot recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } Color Captures the name of the color from a user utterance. For example, Set the status to Green. Returns a value for the Color as Green as a string. See Supported Colors list. \"entities\": { \"ColorEntity\": \"green\" } Currency Captures the amount and type of currency from the user utterance. For example, This handbag is priced at 200 dollars where 200 is the amount and USD is the currency. This entity type recognizes: - Full currency names (Dollar, Rupees, Indian National Rupees, Dinar) - Currency symbols ($, S$, \u00a3) - Standard currency abbreviations (INR, USD) - Commonly used slang for currencies (Buck, Nickel, Dime, Quid, Loonie, Toonie, Benjamin, Jackson, Hamilton.) \"CurrencyEntity\":[ { \"code\": \"SGD\", \"amount\": 20 } Custom Define a regular expression to validate the user input in the Regex field displayed. For example, enter: [a-zA-Z]{3}[-]\\d{4} to return a sample response as: {\"regex\":\"NLP-1234\"} For more information, refer to Regex Expressions. Composite Composite entities are used to capture multiple entity values in one entity. For example, consider the sales inquiries to car sales. Typical queries can be of the form: I am interested in the Tesla Model S 2018 model or What would a red Tesla 2010 model cost or T ell me about Tesla Model S . As you can see, the bot typically needs to process a combination of details like Make, Model, Year, and Color to respond to those queries. These scenarios are taken care of by the Composite Entity Type. Refer here to know more about Composite Entity Types. Date Captures a date mention from a user utterance. For example, Book a flight on the 10th of October returns the value for Date in ISO8601 date format is YYYY-MM-DD. The bot recognizes all possible ways and formats of dates, like: - Formatted dates like YYYY-MM-DD, DD-MM-YYYY, DD-MM-YY, YYYY/MM/DD, DD/MM/YYYY, DD/MM/YY, YYYY.MM.DD, DD.MM.YYYY, DD.MM.YY. - All number dates like YMD and DMY for 20180518 and 09102013. - Formatted dates with space separators like YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd. - Named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018. - Absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, the day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of the year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of the month. - Named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday"
        },
        {
            "chunk_title": "Entity Types - Kore.ai Documentation",
            "chunk_content": "htm. |Element||Description||Examples| |alpha3||The three-letter code of the country||USA, GBR, or IND| |alpha2||The two-letter code for the country||US, GB, or IN| |localName||Name of the country||United States of America, United Kingdom, or India| |shortName||Short name||United States, United Kingdom, or India| |numericalCode||United Nations, used numerical code M49 for countries||840, 826, or 356| Company Name or Organization Name Captures the name of a company from user utterances such as the Nearest branch for Amazon . The value for Company Name is returned ( Amazon ) as a string. The company name corpus includes language-specific names. Variations of a company\u2019s name like stock name, registered name, etc. are all mapped to a common name, thus ensuring that, for example, Amazon, Amazon.com, Amazon Inc are all recognized as a single company. Apart from the supported companies, the virtual assistant recognizes the words starting with a capital letter and followed by these suffixes as a company type: Inc, Incorporated, Corp, Corporation, Group, Ltd, Limited, Co, Company, LP, LLP, LLLP, LLC, PLLC. \"entities\": { \"OrganizationEntity\": \"amazon\" } ABN AMRO Accor Acer Activision Blizzard (Activision Blizzard) Acumen Adidas Aditi Technologies Aditya Birla Advanced Micro Devices (AMD) Affiliated Computer Services Ahold Delhaize Air France-KLM Airbus Aitken Spence AkzoNobel Albertson\u2019s Albertsons Alcatel-Lucent Alfa Laval Alliance Global Allianz AllState Alstom Altria Amazon.com (Amazon) American Express (AMEX) American International Group (AIG) American Savings Andritz AG AOL Time Warner (AOL Time Warner) Aon Apollo Tyres Apple Apple Computer Arcor Assicurazioni Generali Associated Press Asus AT&T Atari Avast Software Avatar Reality Avianca AXA Axiata Axis Bank Bacardi Banco Bilbao Vizcaya Argentaria (BBVA) Banco Santander Bank of America (BOA) Bank of Hawaii (BOH) Bank of Montreal Barclays Barilla Barnes and Noble Barrick Gold BASF Baskin-Robbins Bata Bayer Becton Dickinson Berkshire Hathaway Bic BIDV Billabong Black & Decker Bloomingdale\u2019s BMW BNP Paribas (BNP) Boeing Bombardier Borders Bouygues BRAC Bridgestone British Airways (BA) British Petroleum (BP) Brookstone\u2019s Cadbury Schweppes Canon CapGemini Capital One Caterpillar Celestica Central Pacific Bank Chevron Cisco Systems (Cisco) Citibank (Citi and Citigroup) Coca-Cola (Coke) Cognizant Technology Solutions Comerica Concentrix ConocoPhillips (Conoco) Costco Countrywide Creative Labs Cr\u00e9dit Agricole (CA) Credit Suisse Cummins CVS Dabur Daikin Daimler AG Dangote Danish Refugee Council Danone Decathlon Dell Dell Computer (Dell) Deloitte Delta Air Lines (Delta) Deutsche Bank Deutsche Telekom DHL Dow Chemical Dunkin\u2019 Donuts easyJet EDF Electrolux Electronic Arts (EA) Electronic Data Systems (EDS) Embraer EMC Emerson Electric Enel Eni Enron Epson Ericsson Etisalat Expedia Exxon Mobil (Exxon Mobil) ExxonMobil (Exxon Mobil) EY Faber-Castell Facebook Federal Express (FedEx) Ferrero Fiat Ficosa Finastra FIS FleetBoston Foodland Ford Motor Company (Ford) FPT France T\u00e9l\u00e9com Fujitsu Gap Gazprom General Electric (GE) General Motors (GM) General Nutrition Center (GNC) Generali Gerdau Gillette Glaxo Smith Kline (Glaxo) Google Haier Halliburton Hawaiian Electric (HECO) HCL Technologies Hearst Heineken Hewlett Packard (HP) Hewlett-Packard (HP) Hilti Hindustan Computers Hitachi Honda Honda Motors (Honda) Honeywell HSBC HTC Huawei Hutchison Whampoa Hyundai Hyundai Motor Company ICAP ICICI IKEA Illinois Tool Works Indesit Indian Oil Indofood Infosys ING Ingersoll Rand Instagram Intel International Business Machines (IBM) International Paper Intesa Sanpaolo IOCL Isuzu Jardine Matheson JCPenney (J.C. Penney, JC Penny, and JC Penney) JG Summit Holdings Johnson & Johnson (J&J) Jollibee JPMorgan Chase (JPMorgan Chase) Kenya"
        },
        {
            "chunk_title": "Entity Types - Kore.ai Documentation",
            "chunk_content": " YYYY MM DD. dd/mm yyyy, dd-mm, dd-mm-yyyy, dd-mm-yy, mm-dd, dd / mm / yyyy, dd . mm . yyyy, ddmm yyyy, mmdd. - Named months like yyyy/dd/monthNames or yyyy-dd-monthNames or dd.monthNames.yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018. - Absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, the day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of the year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of the month. - Named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year. \"entities\": { \"DateEntity\": \"1982-04-13\" } Date Time Captures a date grouping along with time in a user utterance. For example, Book a flight on the 10 th of October at 6 pm, r eturns the value for Date Time in ISO8601 date format as YYYYY-MM-DDThh: mm: ss.sTZD. The virtual assistant recognizes all possible ways and formats to express date and time. \"entities\": { \"DateEntity\": \"2017-10-10T18:00:00+05:30\" } Date Period Captures start date and end date from the user input. For example, Book the hotel for five days starting May 5. If the user input does not include one or both of the dates, the virtual assistant prompts the user to provide the necessary input. Note : Unlike other entities, Date Period entities allow you to enter two sets of user and errors prompts: - User and Error Prompt for From Date. - User and Error Prompt for To Date. The following table lists how the entity works in different scenarios: |Input Type||Virtual Assistant Behaviour| |Does not include both From and To dates [For example, Book hotel].||Shows| |Includes either From or To date [For example, Book a hotel from 15th Aug]||Shows| |Includes implicit reference to From Date and duration [For example, Book a hotel for five days starting from Tuesday]||Determines both dates| |Includes From Date and duration [For example, Book a hotel for five days from 15th Nov]||Determines both dates| |Includes From Date and To Date [For example, Book a hotel from 5th to 10th]||Determines both dates| Description Captures statements or paragraphs of text from the user utterance. The value for Description is returned as a string and can include wild characters. \"entities\": { \"Description\": \"text here\" } Captures email address from the utterance. For example, \u201c Send an email to help@koremessenger.com\u201d returns the value of \"entities\": { \"Email\": \"help@koremessenger.com\" } List of Items (enumerated) Display a list of values to the end-user. To define the list type, - Click the Settings icon next to the List of items (enumerated) Type field. - On the List of items (enumerated) Setup page, define one of the following list types. - Static List - List from Context This feature is not fully supported in all languages Click here for details. Static List \u2013 Enter the Display Name , Value , and Synonyms for the key. Set up Auto-Correction value for the user inputs. List from Context \u2013 Define a context variable to use for this item in the following fields: Specify Context Variable to Use \u2013 Defines the context object type. For example, EnterpriseContext, BotContext, UserContexts, or session variables such as context.entities. Enter context. ; select a context object type. Display Name Key \u2013 The name displayed to the end-user. Value Key"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v9-3",
            "chunk_content": " Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year. \"entities\": { \"DateEntity\": \"1982-04-13\" } Date Time Captures a date grouping along with time in a user utterance. For example, Book a flight on the 10 th of October at 6 pm, r eturns the value for Date Time in ISO8601 date format as YYYYY-MM-DDThh: mm: ss.sTZD. The virtual assistant recognizes all possible ways and formats to express date and time. \"entities\": { \"DateEntity\": \"2017-10-10T18:00:00+05:30\" } Date Period Captures start date and end date from the user input. For example, Book the hotel for five days starting May 5. If the user input does not include one or both of the dates, the virtual assistant prompts the user to provide the necessary input. Note : Unlike other entities, Date Period entities allow you to enter two sets of user and errors prompts: - User and Error Prompt for From Date. - User and Error Prompt for To Date. The following table lists how the entity works in different scenarios: |Input Type||Virtual Assistant Behaviour| |Does not include both From and To dates [For example, Book hotel].||Shows| |Includes either From or To date [For example, Book a hotel from 15th Aug]||Shows| |Includes implicit reference to From Date and duration [For example, Book a hotel for five days starting from Tuesday]||Determines both dates| |Includes From Date and duration [For example, Book a hotel for five days from 15th Nov]||Determines both dates| |Includes From Date and To Date [For example, Book a hotel from 5th to 10th]||Determines both dates| Description Captures statements or paragraphs of text from the user utterance. The value for Description is returned as a string and can include wild characters. \"entities\": { \"Description\": \"text here\" } Captures email address from the utterance. For example, \u201c Send an email to help@koremessenger.com\u201d returns the value of \"entities\": { \"Email\": \"help@koremessenger.com\" } List of Items (enumerated) Display a list of values to the end-user. To define the list type, - Click the Settings icon next to the List of items (enumerated) Type field. - On the List of items (enumerated) Setup page, define one of the following list types. - Static List - List from Context This feature is not fully supported in all languages Click here for details. Static List \u2013 Enter the Display Name , Value , and Synonyms for the key. Set up Auto-Correction value for the user inputs. List from Context \u2013 Define a context variable to use for this item in the following fields: Specify Context Variable to Use \u2013 Defines the context object type. For example, EnterpriseContext, BotContext, UserContexts, or session variables such as context.entities. Enter context. ; select a context object type. Display Name Key \u2013 The name displayed to the end-user. Value Key \u2013 The key that represents the value of the item in the list. Synonyms Key \u2013 Enter one or more synonyms for the key (Click here for details). Auto-Correction \u2013 Set up auto-correct thresholds for the LOV entity type so that it not only accepts exact matches but also closest utterances with small variations. For example, let us consider that a list value called Apple for which a typo such as appel is accepted based on your threshold settings. The Auto-Correction setting works in the following way: - The virtual assistant identifies the number of letters to be changed (inserts, deletes, or replaces) in user input to match it to a value in the list. - The number is converted to a percentage of the total number of letters in the input. - The list value with the highest similarity is considered as input if the score is greater than or equal to the configured percentage. Spell correction does not apply to dictionary words or alphanumeric inputs. Post v7.1, the following keys are added to the context object for the below-mentioned usage: ambiguousEntityValues : This key contains values when the user input for a multi-item"
        },
        {
            "chunk_title": "Entity Types - Kore.ai Documentation",
            "chunk_content": ".yyyy 2018/28/Dec or 2018-28-Dec or 28.Dec.2018. - Absolute dates related to now like today, tomorrow, yesterday, tonight, this evening, this afternoon, day after tomorrow, the day before yesterday, yesterday morning, tomorrow night, tomorrow for 1 hour, 3 days ago, 24 hours ago, in 3 days, 2 months hence, this day next month last year, next June, June 26 of the year after next, in a week, 2 weeks ago, 22nd of this month, Next month this day, Next 25th, This month 30th, 27th of this month, 3rdmonth, 2nd of the month. - Named dates like Christmas Day, Christmas Eve, Memorial Day this year, Thanksgiving 2018, last Thanksgiving, week after Thanksgiving, Passover, a day before the new year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year. \"entities\": { \"DateEntity\": \"1982-04-13\" } Date Time Captures a date grouping along with time in a user utterance. For example, Book a flight on the 10 th of October at 6 pm, r eturns the value for Date Time in ISO8601 date format as YYYYY-MM-DDThh: mm: ss.sTZD. The virtual assistant recognizes all possible ways and formats to express date and time. \"entities\": { \"DateEntity\": \"2017-10-10T18:00:00+05:30\" } Date Period Captures start date and end date from the user input. For example, Book the hotel for five days starting May 5. If the user input does not include one or both of the dates, the virtual assistant prompts the user to provide the necessary input. Note : Unlike other entities, Date Period entities allow you to enter two sets of user and errors prompts: - User and Error Prompt for From Date. - User and Error Prompt for To Date. The following table lists how the entity works in different scenarios: |Input Type||Virtual Assistant Behaviour| |Does not include both From and To dates [For example, Book hotel].||Shows| |Includes either From or To date [For example, Book a hotel from 15th Aug]||Shows| |Includes implicit reference to From Date and duration [For example, Book a hotel for five days starting from Tuesday]||Determines both dates| |Includes From Date and duration [For example, Book a hotel for five days from 15th Nov]||Determines both dates| |Includes From Date and To Date [For example, Book a hotel from 5th to 10th]||Determines both dates| Description Captures statements or paragraphs of text from the user utterance. The value for Description is returned as a string and can include wild characters. \"entities\": { \"Description\": \"text here\" } Captures email address from the utterance. For example, \u201c Send an email to help@koremessenger.com\u201d returns the value of \"entities\": { \"Email\": \"help@koremessenger.com\" } List of Items (enumerated) Display a list of values to the end-user. To define the list type, - Click the Settings icon next to the List of items (enumerated) Type field. - On the List of items (enumerated) Setup page, define one of the following list types. - Static List - List from Context This feature is not fully supported in all languages Click here for details. Static List \u2013 Enter the Display Name , Value , and Synonyms for the key. Set up Auto-Correction value for the user inputs. List from Context \u2013 Define a context variable to use for this item in the following fields: Specify Context Variable to Use \u2013 Defines the context object type. For example, EnterpriseContext, BotContext, UserContexts, or session variables such as context.entities. Enter context. ; select a context object type. Display Name Key \u2013 The name displayed to the end-user. Value Key \u2013 The key that represents the value of the item in the list. Synonyms Key \u2013 Enter one or more synonyms for the key (Click here for details). Auto-Correction \u2013 Set up auto-correct thresholds for the LOV entity type so that it not only accepts exact matches but also closest utterances with small variations. For example, let us consider that a list value called Apple for which a typo such as app"
        },
        {
            "chunk_title": "Usage Plans - Kore.ai Documentation",
            "chunk_content": "| |Yes||Yes| |Yes||Yes| |Yes||Yes| |Yes||Yes| |20||Custom| |Yes||Yes| |Insights and Analytics| |Yes||Yes| |10 Widgets||Unlimited| |3 Months||Custom| |Administration| |Cloud||Cloud, Hybrid & On-Premises| |Yes||Yes| |Standard||Advanced| |Unlimited||Unlimited| |Yes||Yes| |No||Yes| |No||Yes| |Support| |Yes||Yes| |Option to upgrade to Standard Support. Plans start at $1,000/month.||Guided Success Program| |Not Available||Yes, with an option to upgrade to the Enterprise Support Plan.|Usage Limits Every user-bot conversation is billed. The VA stops responding when the free or paid credits are exhausted. Conversation Designer Prototype, collaborate and design multi-turn conversations Dialog Builder Build conversation flows, define business rules and integration with business systems using a low code builder. Dialog Tasks (Up to) Dialog Tasks are business use cases involving multi-turn conversations. Topic Modeler Analyze agent transcripts to auto-identify intents, entities and flows. Proactive Notifications Deliver users timely, relevant, and personalized information. Small Talk Engage users in casual conversations. Visual Experience Complement the conversational experience using visual forms and widgets to collect and present information. Knowledge Extraction Extract FAQs from your existing documents like PDFs and webpages. Knowledge Graph Turn static FAQs into an intelligent, personalized conversational experience. FAQs (Up to) Maximum FAQs allowed. Multichannel Support Deploy on users\u2019 preferred voice and text channels. Multilingual Assistants Interact with the assistant in multiple languages. Universal Assistants Link multiple standard assistants to a Universal Virtual Assistant for enabling collaboration between teams and providing a unified experience for your customers. Multi-Engine NLP Leverage the power of FM, KG and ML engines for better NLP accuracy. ML Training Models Experiment with various training models to get the best NLP accuracy. Total Training Utterances (Up to) Utterances are the training data for the ML Models. Conversational Intelligence Handle contextual intents, follow-ups and interruptions. Multi-intent Management Identify and follow up on multiple intents from a single-user input. Entity Amendments Intelligent handling of amendments to entities anytime during the conversation. Sentiment Analysis Analyze the sentiment of the user and dynamically manage the conversations. Test Cases per Batch Test Suite (Up to) Measure the NLP accuracy by running automated tests. Test Cases for Conversation Testing (Up to) Test intent fulfillment by automating end-to-end conversational flows. Rate Limit for Batch Testing Maximum batch test executions allowed. Rate Limit for Conversation Testing Maximum conversation test executions allowed. IVR Sandbox Test end-to-end IVR experience using Kore.ai\u2019s Sandbox environment. Service Orchestration Securely integrate with your business systems for authenticating users, transactions, and information exchange. Agent Transfer Seamlessly hand off the conversations to your live agents when predefined business rules are met. Platform SDK Build powerful extensions to the Platform using the SDK. Web and Mobile Clients Instantly launch your virtual assistants on web or mobile devices. Use the SDKs to embed them in your websites and mobile apps. Variables Automate the SDLC process using variables to define environment-specific values. Versions Create, store and restore versions of the assistant for promoting across different environments. Version Comparison Visually compare definition versions of the assistant to identify the changes made over time. Prebuilt Conversation & NLP Analytics Evaluate the assistant\u2019s performance using out-of-the-box metrics. Custom KPIs & Analytics (Widgets) Create custom dashboards based on your business requirements. Analytics History Data retention and data viewing limits. Deployment Model Choose from On-premise, Hybrid & Cloud models for hosting the assistants. SSO Single Sign-On authentication for your domain users. Data Retention Limit on user data retention. Collaborators (per assistant) Invite team members for collaborative development. Access to Public APIs Design, build and monitor the assistants using APIs. AD Sync Sync and import key user info from your organization\u2019s directory. Cloud Connector Connectors to establish secure communications through the firewall. Basic Support Access to Community, Academy, and Documentation. Standard Support Access email support on weekdays from 8 am-5 pm with a 24-hour initial response time Enterprise Support Email, phone, and video support (24*7). Guided success program. Navigating to Plan and Usage To access the Plan and Usage feature on the Bot Builder, follow the steps below: - Click your Virtual Assistant on the Virtual Assistants page. - Navigate to the Manage section and click Plan and Usage on the left menu. Alternatively,"
        },
        {
            "chunk_title": "9.0.x Release Details - Kore.ai Documentation v9-2",
            "chunk_content": "DOCUMENTATION Go To Builder search - Home - Docs - Virtual Assistants - What's New - 9.0.x Release Details6 min read 9.0.x Release Details6 min read This page gives full details of the various platform releases and the corresponding features that were updated/enhanced in version 8.1.x of the platform. v9.0.00 Aug 14th 2021 Major Release Following is a list of feature enhancements addressed in this release. |Feature||Enhancement| |Conversation Driven Dialog Building||Using the conversation-driven Dialog Builder, the product owners, business analysts, linguistic experts, content editors, and engineers can all collaborate on the same definition for achieving the common goal. The conversation flow can be designed using bot and user messages, and the Platform automatically transforms the conversation flow into a Dialog Task. The integrated view for evaluation of the conversation flow and the dialog flow and the two-way sync between both the views are key ingredients to this collaboration. This is a beta release for this feature and a few more updates are expected in the upcoming releases. Know more.| |Process Application Builder||Design flows to automate business processes using the no-code/low-code Process Flow Builder. It comes with a wide range of predefined templates, support for multiple trigger points \u2013 Forms, Conversational Assistants, API, Email. The in-built self-service Portal can be used by your users to quickly initiate new tasks and approve the pending tasks. One can also review teams and workflow performance using built-in analytics. Know more.| |Store||Introducing the Store to explore various pre-built templates and accelerators to jump-start the designing of Virtual Assistants and Process Apps. Explore the full capabilities of a template and install it to customize as needed. These prebuilt templates include a reference implementation for popular use cases like order updates, incident/ticket management, account management. Know more.| |Enhanced User Interface| |Version Comparison||Bot Version feature now allows you to compare two versions of a bot across various sections of the bot definition. Administrators can use this tool to compare the changes during deployment and designers can use it to analyze changes or debug errors. Know more.| - The refreshed user interface for the Kore.ai Platform \u2013 The Virtual Assistant designing features are packaged into Build, Deploy, Analyze and Manage sections, aligning them closely with the development lifecycle. All the features required to build tasks, train, and test are included under the Build menu. Channel enablement, integrations, publish flow, and bot definition management are under the Deploy menu. Know more. - Unified NLP Training \u2013 A simplified experience for training the Machine Learning and Fundamental Meaning Engines in one place. Intents can be trained using a unified interface, making it easier to switch between utterances, patterns, and rules. Know more. |Feature||Enhancement| |Entity Processing||Following are the enhancements to the entity rules in this release:| |NL Training| |Knowledge Graph| - Ability to accept only \u2018month and year\u2019 as input for Date entity ( returnOnlyMonthYear ) - Ability to set preferred format for Date entity to avoid ambiguity scenarios ( preferredDateFormat ) Know more. ML Network Types : Introducing Kore Advanced Embedding Network (KAEN) a model which can understand the meaning of the sentence and at the same time give importance to the domain-specific terminology. Know more. Advanced NLP Configurations allow users to fine-tune the NLP engines using advanced controls. The following enhancements have been included in this release: - Custom configuration for auto spell correction support for ML predictions . Know more. - Additional configurations for the evaluation of the Fundamental Machine Engine Patterns . Know more. - Configure Softmax Temperature to define how confidently the ML Engine should identify the winning intent from the ML Model. Know more. - Configure Neurons in Hidden Layer to determine the intensity/rigor to be adopted while performing intent identification by the ML Model. Know more. Taxonomy based Knowledge Graph \u2013 Explore the new approach to build a Knowledge Graph with built-in flows to engage the user in a multi-turn conversation to disambiguate the path and find the right question. Proceed to the Advanced NLP Configurations section to enable this feature. This is a beta release for this feature and a few more updates are expected in the upcoming releases. . Know more. - Support for Display Name and Reference Id fields. Display name will be used for presenting the FAQ to the end-users in case of ambiguity while reference id can be used to add a reference to any external content used as a source for a given FAQ. Know more. - Ability to present all FAQs as ambiguous if only the path is matched and no questions are matched. Know more. - Ability to customize the order of displaying FAQs for dis"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v9.0",
            "chunk_content": " year, day after Christmas. - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year. \"entities\": { \"DateEntity\": \"1982-04-13\" } Date Time Captures a date grouping along with time in a user utterance. For example, Book a flight on the 10 th of October at 6 pm, r eturns the value for Date Time in ISO8601 date format as YYYYY-MM-DDThh: mm: ss.sTZD. The bot recognizes all possible ways and formats to express date and time. \"entities\": { \"DateEntity\": \"2017-10-10T18:00:00+05:30\" } Date Period Captures start date and end date from the user input. For example, Book the hotel for five days starting May 5. If the user input does not include one or both of the dates, the bot prompts the user to provide the necessary input. Note : Unlike other entities, Date Period entities allow you to enter two sets of user and errors prompts: - User and Error Prompt for From Date. - User and Error Prompt for To Date. The following table lists how the entity works in different scenarios: |Input Type||Bot Behaviour| |Does not include both From and To dates [For example, Book hotel].||Shows| |Includes either From or To date [For example, Book a hotel from 15th Aug]||Shows| |Includes implicit reference to From Date and duration [For example, Book a hotel for five days starting from Tuesday]||Determines both dates| |Includes From Date and duration [For example, Book a hotel for five days from 15th Nov]||Determines both dates| |Includes From Date and To Date [For example, Book a hotel from 5th to 10th]||Determines both dates| Description Captures statements or paragraphs of text from the user utterance. The value for Description is returned as a string and can include wild characters. \"entities\": { \"Description\": \"text here\" } Captures email address from the utterance. For example, \u201c Send an email to help@koremessenger.com\u201d returns the value of \"entities\": { \"Email\": \"help@koremessenger.com\" } List of Items (enumerated) Display a list of values to the end-user. To define the list type, - Click the Settings icon next to the List of items (enumerated) Type field. - On the List of items (enumerated) Setup page, define one of the following list types. - Static List - List from Context This feature is not fully supported in all languages Click here for details. Static List \u2013 Enter the Display Name , Value , and Synonyms for the key. Set up Auto-Correction value for the user inputs. List from Context \u2013 Define a context variable to use for this item in the following fields: Specify Context Variable to Use \u2013 Defines the context object type. For example, EnterpriseContext, BotContext, UserContexts, or session variables such as context.entities. Enter context. ; select a context object type. Display Name Key \u2013 The name displayed to the end-user. Value Key \u2013 The key that represents the value of the item in the list. Synonyms Key \u2013 Enter one or more synonyms for the key (Click here for details). Auto-Correction \u2013 Set up auto-correct thresholds for the LOV entity type so that it not only accepts exact matches but also closest utterances with small variations. For example, let us consider that a list value called Apple for which a typo such as appel is accepted based on your threshold settings. The Auto-Correction setting works in the following way: - The bot identifies the number of letters to be changed (inserts, deletes, or replaces) in user input to match it to a value in the list. - The number is converted to a percentage of the total number of letters in the input. - The list value with the highest similarity is considered as input if the score is greater than or equal to the configured percentage. Spell correction does not apply to dictionary words or alphanumeric inputs. Post v7.1, the following keys are added to the context object for the below-mentioned usage: ambiguousEntityValues : This key contains values when the user input for a multi-item entity is ambiguous. Using this, you can check if any ambiguous values were identified and construct the flow to resolve the ambiguity. This"
        },
        {
            "chunk_title": "9.0.x Release Details - Kore.ai Documentation v9.0",
            "chunk_content": "DOCUMENTATION - Home - Docs - Virtual Assistants - What's New - 9.0.x Release Details 9.0.x Release Details This page gives full details of the various platform releases and the corresponding features that were updated/enhanced in version 8.1.x of the platform. v9.0.00 Aug 14th 2021 Major Release Following is a list of feature enhancements addressed in this release. |Feature||Enhancement| |Conversation Driven Dialog Building||Using the conversation-driven Dialog Builder, the product owners, business analysts, linguistic experts, content editors, and engineers can all collaborate on the same definition for achieving the common goal. The conversation flow can be designed using bot and user messages, and the Platform automatically transforms the conversation flow into a Dialog Task. The integrated view for evaluation of the conversation flow and the dialog flow and the two-way sync between both the views are key ingredients to this collaboration. This is a beta release for this feature and a few more updates are expected in the upcoming releases. Know more.| |Process Application Builder||Design flows to automate business processes using the no-code/low-code Process Flow Builder. It comes with a wide range of predefined templates, support for multiple trigger points \u2013 Forms, Conversational Assistants, API, Email. The in-built self-service Portal can be used by your users to quickly initiate new tasks and approve the pending tasks. One can also review teams and workflow performance using built-in analytics. Know more.| |Store||Introducing the Store to explore various pre-built templates and accelerators to jump-start the designing of Virtual Assistants and Process Apps. Explore the full capabilities of a template and install it to customize as needed. These prebuilt templates include a reference implementation for popular use cases like order updates, incident/ticket management, account management. Know more.| |Enhanced User Interface| |Version Comparison||Bot Version feature now allows you to compare two versions of a bot across various sections of the bot definition. Administrators can use this tool to compare the changes during deployment and designers can use it to analyze changes or debug errors. Know more.| - The refreshed user interface for the Kore.ai Platform \u2013 The Virtual Assistant designing features are packaged into Build, Deploy, Analyze and Manage sections, aligning them closely with the development lifecycle. All the features required to build tasks, train, and test are included under the Build menu. Channel enablement, integrations, publish flow, and bot definition management are under the Deploy menu. Know more. - Unified NLP Training \u2013 A simplified experience for training the Machine Learning and Fundamental Meaning Engines in one place. Intents can be trained using a unified interface, making it easier to switch between utterances, patterns, and rules. Know more. |Feature||Enhancement| |Entity Processing||Following are the enhancements to the entity rules in this release:| |NL Training| |Knowledge Graph| - Ability to accept only \u2018month and year\u2019 as input for Date entity ( returnOnlyMonthYear ) - Ability to set preferred format for Date entity to avoid ambiguity scenarios ( preferredDateFormat ) Know more. ML Network Types : Introducing Kore Advanced Embedding Network (KAEN) a model which can understand the meaning of the sentence and at the same time give importance to the domain-specific terminology. Know more. Advanced NLP Configurations allow users to fine-tune the NLP engines using advanced controls. The following enhancements have been included in this release: - Custom configuration for auto spell correction support for ML predictions . Know more. - Additional configurations for the evaluation of the Fundamental Machine Engine Patterns . Know more. - Configure Softmax Temperature to define how confidently the ML Engine should identify the winning intent from the ML Model. Know more. - Configure Neurons in Hidden Layer to determine the intensity/rigor to be adopted while performing intent identification by the ML Model. Know more. Taxonomy based Knowledge Graph \u2013 Explore the new approach to build a Knowledge Graph with built-in flows to engage the user in a multi-turn conversation to disambiguate the path and find the right question. Proceed to the Advanced NLP Configurations section to enable this feature. This is a beta release for this feature and a few more updates are expected in the upcoming releases. . Know more. - Support for Display Name and Reference Id fields. Display name will be used for presenting the FAQ to the end-users in case of ambiguity while reference id can be used to add a reference to any external content used as a source for a given FAQ. Know more. - Ability to present all FAQs as ambiguous if only the path is matched and no questions are matched. Know more. - Ability to customize the order of displaying FAQs for disambiguation . Know more. |Feature||"
        },
        {
            "chunk_title": "Docs Archives - Kore.ai Documentation v9-1",
            "chunk_content": "DOCUMENTATION Docs Adding Karix as a Channel To integrate Karix to your WhatsApp Business Messaging channel and enable it for a bot, you\u2019ll need to perform the following setup under the Configuration tab. NOTE: To complete this procedure, you must already have a Karix account. This is one of the messaging provider for enabling WhatsApp Business Messaging.\u2026 Adding the IVR-AudioCodes Channel Content coming soon.. Add the Syniverse Channel To set up Syniverse as a channel, the developer needs to associate the bot with a Syniverse app, set up a subscription, and enable the delivery events for this app. This document explains the steps to add the Syniverse as a channel to your bot. Create the App To create\u2026 Add RingCentral Engage as a Channel To set up RingCentral Engage as a channel, you must complete the following steps: Add the Host URL Copy-paste the HOST URL from RingCentral Engage to the Kore.ai platform. Provide it in the Channels \u2192 RingCentral Engage \u2192 Config. Generate API Access Token Login to your RingCentral Engage developer account.\u2026 Process Assistant Plans and Pricing The process assistant subscription plans, pricing and billing information. Note: This page is not available for customers under the Enterprise plan. Billing Sessions The Billing sessions are calculated based on Bot Usage (Usage Session) A usage session is defined as \u2018Fifteen minutes\u2019 of user conversation with the bot. For example\u2026 Proactive Notifications API To send proactive notifications to the configured channel in bot. To use this API, the app needs the Bot Builder API scope of Proactive Messages OR the Admin API Scope of Proactive Messages and respective channel should be configured and published with proactive notifications option enabled in the bot. POST\u2026 Proactive Notification Status API To fetch the status of Proactive Notifications API. To use this API, the app needs the Bot Builder API scope of Proactive Messages OR the Admin API Scope of Proactive Messages. POST https://{{host}}/api/public/bot/{{BotID}}/notify/status/{{requestId}}. Path Parameters Parameter Required/Optional Description host Required Environment URL, for example, https://bots.kore.ai BotID Required Bot ID or\u2026 9.1.x Release Details This page gives full details of the various platform releases and the corresponding features that were updated/enhanced in version 9.1.x of the platform. v9.1.8 Feb 19th 2022 Minor Release This update was mainly aimed at addressing some minor bugs. Following is a list of few updates. Feature Enhancement Virtual Assistant\u2026 Bot Publish Status \u2013 API Gets the publish status of the ongoing bot or the last completed status request of the bot. Refer here for initiating Publish Bot API. To use this API, app needs the Admin API Scope of Publish Status under Bot Publish. GEThttps://{{host}}/api/public/bot/{{BotID}}/publish/status Authorization Invoke the API with JWT in the header\u2026 Bot Administration The Kore.ai Bots Admin Console is a one-stop destination to enroll and manage Kore.ai Bot users in your organization. To know more and work with Kore.ai Bot Admin Console, refer here. Accessing Admin Console You can also access the Bot Admin Console from the Bot Builder using the Got To Admin Console option. NOTE: These options are\u2026 Kore.ai Named a Leader in 2022 Gartner\u00ae Magic Quadrant\u2122 for Enterprise Conversational AI PlatformsGet the Report"
        },
        {
            "chunk_title": "9.0.x Release Details - Kore.ai Documentation v9-3",
            "chunk_content": "DOCUMENTATION Go To Builder search - Home - Docs - Virtual Assistants - What's New - 9.0.x Release Details 9.0.x Release Details This page gives full details of the various platform releases and the corresponding features that were updated/enhanced in version 8.1.x of the platform. v9.0.00 Aug 14th 2021 Major Release Following is a list of feature enhancements addressed in this release. |Feature||Enhancement| |Conversation Driven Dialog Building||Using the conversation-driven Dialog Builder, the product owners, business analysts, linguistic experts, content editors, and engineers can all collaborate on the same definition for achieving the common goal. The conversation flow can be designed using bot and user messages, and the Platform automatically transforms the conversation flow into a Dialog Task. The integrated view for evaluation of the conversation flow and the dialog flow and the two-way sync between both the views are key ingredients to this collaboration. This is a beta release for this feature and a few more updates are expected in the upcoming releases. Know more.| |Process Application Builder||Design flows to automate business processes using the no-code/low-code Process Flow Builder. It comes with a wide range of predefined templates, support for multiple trigger points \u2013 Forms, Conversational Assistants, API, Email. The in-built self-service Portal can be used by your users to quickly initiate new tasks and approve the pending tasks. One can also review teams and workflow performance using built-in analytics. Know more.| |Store||Introducing the Store to explore various pre-built templates and accelerators to jump-start the designing of Virtual Assistants and Process Apps. Explore the full capabilities of a template and install it to customize as needed. These prebuilt templates include a reference implementation for popular use cases like order updates, incident/ticket management, account management. Know more.| |Enhanced User Interface| |Version Comparison||Bot Version feature now allows you to compare two versions of a bot across various sections of the bot definition. Administrators can use this tool to compare the changes during deployment and designers can use it to analyze changes or debug errors. Know more.| - The refreshed user interface for the Kore.ai Platform \u2013 The Virtual Assistant designing features are packaged into Build, Deploy, Analyze and Manage sections, aligning them closely with the development lifecycle. All the features required to build tasks, train, and test are included under the Build menu. Channel enablement, integrations, publish flow, and bot definition management are under the Deploy menu. Know more. - Unified NLP Training \u2013 A simplified experience for training the Machine Learning and Fundamental Meaning Engines in one place. Intents can be trained using a unified interface, making it easier to switch between utterances, patterns, and rules. Know more. |Feature||Enhancement| |Entity Processing||Following are the enhancements to the entity rules in this release:| |NL Training| |Knowledge Graph| - Ability to accept only \u2018month and year\u2019 as input for Date entity ( returnOnlyMonthYear ) - Ability to set preferred format for Date entity to avoid ambiguity scenarios ( preferredDateFormat ) Know more. ML Network Types : Introducing Kore Advanced Embedding Network (KAEN) a model which can understand the meaning of the sentence and at the same time give importance to the domain-specific terminology. Know more. Advanced NLP Configurations allow users to fine-tune the NLP engines using advanced controls. The following enhancements have been included in this release: - Custom configuration for auto spell correction support for ML predictions . Know more. - Additional configurations for the evaluation of the Fundamental Machine Engine Patterns . Know more. - Configure Softmax Temperature to define how confidently the ML Engine should identify the winning intent from the ML Model. Know more. - Configure Neurons in Hidden Layer to determine the intensity/rigor to be adopted while performing intent identification by the ML Model. Know more. Taxonomy based Knowledge Graph \u2013 Explore the new approach to build a Knowledge Graph with built-in flows to engage the user in a multi-turn conversation to disambiguate the path and find the right question. Proceed to the Advanced NLP Configurations section to enable this feature. This is a beta release for this feature and a few more updates are expected in the upcoming releases. . Know more. - Support for Display Name and Reference Id fields. Display name will be used for presenting the FAQ to the end-users in case of ambiguity while reference id can be used to add a reference to any external content used as a source for a given FAQ. Know more. - Ability to present all FAQs as ambiguous if only the path is matched and no questions are matched. Know more. - Ability to customize the order of displaying FAQs for disambiguation . Know more"
        },
        {
            "chunk_title": "Supported Entity Types - Kore.ai Documentation v8.1",
            "chunk_content": ". - Relative dates from absolute like 2 more days from tomorrow, 3 days after July 4, 3 days from now, 5days from today, Need two more days, in 2 days. - Weekdays like Saturday, coming Monday, Sunday, Saturday, next weekend, First Saturday of the upcoming year, First Sunday of the upcoming month, first Saturday of next month, First Sunday of next year. \"entities\": { \"DateEntity\": \"1982-04-13\" } Date Time Captures a date grouping along with time in a user utterance. For example, Book a flight on the 10 th of October at 6 pm, r eturns the value for Date Time in ISO8601 date format as YYYYY-MM-DDThh: mm: ss.sTZD. The bot recognizes all possible ways and formats to express date and time. \"entities\": { \"DateEntity\": \"2017-10-10T18:00:00+05:30\" } Date Period Captures start date and end date from the user input. For example, Book the hotel for five days starting May 5. If the user input does not include one or both of the dates, the bot prompts the user to provide the necessary input. Note : Unlike other entities, Date Period entities allow you to enter two sets of user and errors prompts: - User and Error Prompt for From Date. - User and Error Prompt for To Date. The following table lists how the entity works in different scenarios: |Input Type||Bot Behaviour| |Does not include both From and To dates [For example, Book hotel].||Shows| |Includes either From or To date [For example, Book a hotel from 15th Aug]||Shows| |Includes implicit reference to From Date and duration [For example, Book a hotel for five days starting from Tuesday]||Determines both dates| |Includes From Date and duration [For example, Book a hotel for five days from 15th Nov]||Determines both dates| |Includes From Date and To Date [For example, Book a hotel from 5th to 10th]||Determines both dates| Description Captures statements or paragraphs of text from the user utterance. The value for Description is returned as a string and can include wild characters. \"entities\": { \"Description\": \"text here\" } Captures email address from the utterance. For example, \u201c Send an email to help@koremessenger.com\u201d returns the value of \"entities\": { \"Email\": \"help@koremessenger.com\" } List of Items (enumerated) Display a list of values to the end-user. To define the list type, - Click the Settings icon next to the List of items (enumerated) Type field. - On the List of items (enumerated) Setup page, define one of the following list types. - Static List - List from Context This feature is not fully supported in all languages Click here for details. Static List \u2013 Enter the Display Name , Value , and Synonyms for the key. Set up Auto-Correction value for the user inputs. List from Context \u2013 Define a context variable to use for this item in the following fields: Specify Context Variable to Use \u2013 Defines the context object type. For example, EnterpriseContext, BotContext, UserContexts, or session variables such as context.entities. Enter context. ; select a context object type. Display Name Key \u2013 The name displayed to the end-user. Value Key \u2013 The key that represents the value of the item in the list. Synonyms Key \u2013 Enter one or more synonyms for the key (Click here for details). Auto-Correction \u2013 Set up auto-correct thresholds for the LOV entity type so that it not only accepts exact matches but also closest utterances with small variations. For example, let us consider that a list value called Apple for which a typo such as appel is accepted based on your threshold settings. The Auto-Correction setting works in the following way: - The bot identifies the number of letters to be changed (inserts, deletes, or replaces) in user input to match it to a value in the list. - The number is converted to a percentage of the total number of letters in the input. - The list value with the highest similarity is considered as input if the score is greater than or equal to the configured percentage. Spell correction does not apply to dictionary words or alphanumeric inputs. Post v7.1, the following keys are added to the context object for the below-mentioned usage: ambiguousEntityValues : This key contains values when the user input for a multi-item entity is ambiguous. Using this, you can check if any ambiguous values were identified and construct the flow to resolve the ambiguity. This key is reset if the"
        },
        {
            "chunk_title": "9.0.x Release Details - Kore.ai Documentation v9-1",
            "chunk_content": "DOCUMENTATION - Home - Docs - Virtual Assistants - What's New - 9.0.x Release Details 9.0.x Release Details This page gives full details of the various platform releases and the corresponding features that were updated/enhanced in version 8.1.x of the platform. v9.0.00 Aug 14th 2021 Major Release Following is a list of feature enhancements addressed in this release. |Feature||Enhancement| |Conversation Driven Dialog Building||Using the conversation-driven Dialog Builder, the product owners, business analysts, linguistic experts, content editors, and engineers can all collaborate on the same definition for achieving the common goal. The conversation flow can be designed using bot and user messages, and the Platform automatically transforms the conversation flow into a Dialog Task. The integrated view for evaluation of the conversation flow and the dialog flow and the two-way sync between both the views are key ingredients to this collaboration. This is a beta release for this feature and a few more updates are expected in the upcoming releases. Know more.| |Process Application Builder||Design flows to automate business processes using the no-code/low-code Process Flow Builder. It comes with a wide range of predefined templates, support for multiple trigger points \u2013 Forms, Conversational Assistants, API, Email. The in-built self-service Portal can be used by your users to quickly initiate new tasks and approve the pending tasks. One can also review teams and workflow performance using built-in analytics. Know more.| |Store||Introducing the Store to explore various pre-built templates and accelerators to jump-start the designing of Virtual Assistants and Process Apps. Explore the full capabilities of a template and install it to customize as needed. These prebuilt templates include a reference implementation for popular use cases like order updates, incident/ticket management, account management. Know more.| |Enhanced User Interface| |Version Comparison||Bot Version feature now allows you to compare two versions of a bot across various sections of the bot definition. Administrators can use this tool to compare the changes during deployment and designers can use it to analyze changes or debug errors. Know more.| - The refreshed user interface for the Kore.ai Platform \u2013 The Virtual Assistant designing features are packaged into Build, Deploy, Analyze and Manage sections, aligning them closely with the development lifecycle. All the features required to build tasks, train, and test are included under the Build menu. Channel enablement, integrations, publish flow, and bot definition management are under the Deploy menu. Know more. - Unified NLP Training \u2013 A simplified experience for training the Machine Learning and Fundamental Meaning Engines in one place. Intents can be trained using a unified interface, making it easier to switch between utterances, patterns, and rules. Know more. |Feature||Enhancement| |Entity Processing||Following are the enhancements to the entity rules in this release:| |NL Training| |Knowledge Graph| - Ability to accept only \u2018month and year\u2019 as input for Date entity ( returnOnlyMonthYear ) - Ability to set preferred format for Date entity to avoid ambiguity scenarios ( preferredDateFormat ) Know more. ML Network Types : Introducing Kore Advanced Embedding Network (KAEN) a model which can understand the meaning of the sentence and at the same time give importance to the domain-specific terminology. Know more. Advanced NLP Configurations allow users to fine-tune the NLP engines using advanced controls. The following enhancements have been included in this release: - Custom configuration for auto spell correction support for ML predictions . Know more. - Additional configurations for the evaluation of the Fundamental Machine Engine Patterns . Know more. - Configure Softmax Temperature to define how confidently the ML Engine should identify the winning intent from the ML Model. Know more. - Configure Neurons in Hidden Layer to determine the intensity/rigor to be adopted while performing intent identification by the ML Model. Know more. Taxonomy based Knowledge Graph \u2013 Explore the new approach to build a Knowledge Graph with built-in flows to engage the user in a multi-turn conversation to disambiguate the path and find the right question. Proceed to the Advanced NLP Configurations section to enable this feature. This is a beta release for this feature and a few more updates are expected in the upcoming releases. . Know more. - Support for Display Name and Reference Id fields. Display name will be used for presenting the FAQ to the end-users in case of ambiguity while reference id can be used to add a reference to any external content used as a source for a given FAQ. Know more. - Ability to present all FAQs as ambiguous if only the path is matched and no questions are matched. Know more. - Ability to customize the order of displaying FAQs for disambiguation . Know more. |Feature||"
        }
    ]
}